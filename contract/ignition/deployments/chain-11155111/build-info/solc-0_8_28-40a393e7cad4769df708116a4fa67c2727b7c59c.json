{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-40a393e7cad4769df708116a4fa67c2727b7c59c",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/NFTMarketPlace.sol": "project/contracts/NFTMarketPlace.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC721/IERC721.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/IERC721.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC-721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/NFTMarketPlace.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\"; // 防重入攻击\n\n// 平台合约：管理 NFT 交易\ncontract NFTMarketPlace is ReentrancyGuard {\n    // 平台管理员（可收取手续费）\n    address public admin;\n    // 交易手续费比例（千分比，如 25 表示 2.5%）\n    uint256 public platformFee = 25;\n\n    // 订单结构体：记录 NFT 出售信息\n    struct Order {\n        uint256 orderId; // 订单 ID\n        address seller; // 卖家地址\n        address nftContract; // NFT 合约地址（支持多集合）\n        uint256 tokenId; // NFT 唯一 ID\n        uint256 price; // 售价（单位：支付代币的最小单位）\n        address paymentToken; // 支付代币地址（address(0) 表示 ETH）\n        bool isActive; // 订单是否有效\n        bool isEscrowed; // NFT 是否托管在平台\n    }\n\n    // 订单 ID → 订单信息\n    mapping(uint256 => Order) public orders;\n    // 自增订单 ID\n    uint256 public nextOrderId;\n\n    // 事件：记录订单生命周期（供链下服务监听）\n    event OrderCreated(\n        uint256 indexed orderId,\n        address indexed seller,\n        address nftContract,\n        uint256 indexed tokenId,\n        uint256 price,\n        address paymentToken,\n        bool isActive,\n        bool isEscrowed\n    );\n    event OrderCancelled(\n        uint256 indexed orderId,\n        uint256 indexed timestamp\n    );\n    event OrderExecuted(\n        uint256 indexed orderId,\n        address indexed buyer,\n        uint256 timestamp\n    );\n\n    // 初始化：设置管理员为部署者\n    constructor() {\n        admin = msg.sender;\n    }\n\n    /**\n     * 功能 1：创建出售订单（非托管模式）\n     * 说明：NFT 仍在卖家手中，依赖授权让平台后续可转移\n     */\n    function createOrder(\n        address nftContract,\n        uint256 tokenId,\n        uint256 price,\n        address paymentToken\n    ) external nonReentrant {\n        IERC721 nft = IERC721(nftContract);\n\n        // 检查：卖家必须是 NFT 所有者\n        require(nft.ownerOf(tokenId) == msg.sender, unicode\"不是 NFT 所有者\");\n        // 检查：平台必须获得 NFT 转移授权（通过 approve 或 setApprovalForAll）\n        require(\n            nft.isApprovedForAll(msg.sender, address(this)) ||\n                nft.getApproved(tokenId) == address(this),\n            unicode\"请先授权平台转移 NFT\"\n        );\n        // 检查：价格必须大于 0\n        require(price > 0, unicode\"价格必须大于 0\");\n\n        // 创建订单\n        uint256 id = nextOrderId++;\n        orders[id] = Order({\n            orderId: id,\n            seller: msg.sender,\n            nftContract: nftContract,\n            tokenId: tokenId,\n            price: price,\n            paymentToken: paymentToken,\n            isActive: true,\n            isEscrowed: false\n        });\n\n        emit OrderCreated(\n            id,\n            msg.sender,\n            nftContract,\n            tokenId,\n            price,\n            paymentToken,\n            true,\n            false\n        );\n    }\n\n    /**\n     * 功能 2：创建出售订单（托管模式）\n     * 说明：NFT 转移到平台托管，更安全（避免卖家私自转移）\n     */\n    function createOrderWithEscrow(\n        address nftContract,\n        uint256 tokenId,\n        uint256 price,\n        address paymentToken\n    ) external nonReentrant {\n        IERC721 nft = IERC721(nftContract);\n\n        // 检查：卖家是所有者且已授权\n        require(nft.ownerOf(tokenId) == msg.sender, unicode\"不是 NFT 所有者\");\n        require(\n            nft.isApprovedForAll(msg.sender, address(this)) ||\n                nft.getApproved(tokenId) == address(this),\n            unicode\"请先授权平台转移 NFT\"\n        );\n        require(price > 0, unicode\"价格必须大于 0\");\n\n        // 将 NFT 从卖家转移到平台托管\n        nft.transferFrom(msg.sender, address(this), tokenId);\n\n        // 创建订单（标记为托管）\n        uint256 id = nextOrderId++;\n        orders[id] = Order({\n            orderId: id,\n            seller: msg.sender,\n            nftContract: nftContract,\n            tokenId: tokenId,\n            price: price,\n            paymentToken: paymentToken,\n            isActive: true,\n            isEscrowed: true\n        });\n\n        emit OrderCreated(\n            id,\n            msg.sender,\n            nftContract,\n            tokenId,\n            price,\n            paymentToken,\n            true,\n            true\n        );\n    }\n\n    /**\n     * 功能 3：取消订单\n     * 说明：仅卖家可取消，若为托管模式需将 NFT 转回卖家\n     */\n    function cancelOrder(uint256 _orderId) external nonReentrant {\n        Order storage order = orders[_orderId];\n\n        // 检查：订单存在且有效\n        require(order.isActive, unicode\"订单无效或已取消\");\n        // 检查：调用者必须是卖家\n        require(order.seller == msg.sender, unicode\"无权取消订单\");\n\n        // 若 NFT 托管在平台，转回卖家\n        if (order.isEscrowed) {\n            IERC721(order.nftContract).transferFrom(\n                address(this), // 从平台地址转出\n                order.seller, // 转到卖家地址\n                order.tokenId\n            );\n        }\n\n        // 标记订单无效\n        order.isActive = false;\n        uint256 timestamp = block.timestamp;\n        emit OrderCancelled(\n            _orderId,\n            timestamp\n        );\n    }\n\n    /**\n     * 功能 4：执行购买（核心交易逻辑）\n     * 说明：买家支付代币，自动获得 NFT，卖家收到付款（扣除手续费）\n     */\n    function buyNFT(uint256 _orderId) external payable nonReentrant {\n        Order storage order = orders[_orderId];\n\n        // 检查：订单有效\n        require(order.isActive, unicode\"订单无效或已取消\");\n        // 检查：买家不能是卖家\n        require(msg.sender != order.seller, unicode\"不能购买自己的 NFT\");\n\n        address seller = order.seller;\n        address nftContract = order.nftContract;\n        uint256 tokenId = order.tokenId;\n        uint256 price = order.price;\n        address paymentToken = order.paymentToken;\n\n        // 计算手续费和卖家实际收入\n        uint256 platformFeeAmount = (price * platformFee) / 1000; // 千分比计算\n        uint256 sellerAmount = price - platformFeeAmount;\n\n        // 1. 处理支付（区分 ETH 和 ERC-20 代币）\n        if (paymentToken == address(0)) {\n            // 支付方式：ETH\n            require(msg.value == price, unicode\"支付的 ETH 数量不匹配\");\n\n            // 向卖家转账（扣除手续费）\n            (bool sellerSuccess, ) = seller.call{value: sellerAmount}(\"\");\n            require(sellerSuccess, unicode\"卖家 ETH 转账失败\");\n\n            // 向平台转账手续费\n            (bool adminSuccess, ) = admin.call{value: platformFeeAmount}(\"\");\n            require(adminSuccess, unicode\"平台手续费转账失败\");\n        } else {\n            // 支付方式：ERC-20 代币（如 USDC）\n            IERC20 token = IERC20(paymentToken);\n\n            // 从买家扣钱（需提前授权平台）\n            require(\n                token.allowance(msg.sender, address(this)) >= price,\n                unicode\"请先授权平台转移代币\"\n            );\n            // 转账给卖家\n            require(\n                token.transferFrom(msg.sender, seller, sellerAmount),\n                unicode\"卖家代币转账失败\"\n            );\n            // 转账手续费给平台\n            require(\n                token.transferFrom(msg.sender, admin, platformFeeAmount),\n                unicode\"平台手续费转账失败\"\n            );\n        }\n\n        // 2. 转移 NFT 给买家\n        IERC721 nft = IERC721(nftContract);\n        if (order.isEscrowed) {\n            // 从平台托管地址转移\n            nft.transferFrom(address(this), msg.sender, tokenId);\n        } else {\n            // 从卖家地址转移（依赖前期授权）\n            nft.transferFrom(seller, msg.sender, tokenId);\n        }\n\n        // 3. 标记订单无效\n        order.isActive = false;\n        uint256 timestamp = block.timestamp;\n        emit OrderExecuted(\n            _orderId,\n            msg.sender,\n            timestamp\n        );\n    }\n\n    // 允许合约接收 ETH（托管或买家支付时需要）\n    receive() external payable {}\n}\n"
      }
    }
  }
}